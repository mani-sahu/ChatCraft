{"ast":null,"code":"import { getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nimport { Observable, from } from 'rxjs';\nimport { shareReplay, map } from 'rxjs/operators';\n\nfunction fromTask(task) {\n  return new Observable(function (subscriber) {\n    var lastSnapshot = null;\n    var complete = false;\n    var hasError = false;\n    var error = null;\n\n    var emit = function (snapshot) {\n      lastSnapshot = snapshot;\n      schedule();\n    };\n\n    var id = null;\n    /**\n     * Schedules an async event to check and emit\n     * the most recent snapshot, and complete or error\n     * if necessary.\n     */\n\n    var schedule = function () {\n      if (!id) {\n        id = setTimeout(function () {\n          id = null;\n          if (lastSnapshot) subscriber.next(lastSnapshot);\n          if (complete) subscriber.complete();\n          if (hasError) subscriber.error(error);\n        });\n      }\n    };\n\n    subscriber.add(function () {\n      // If we have any emissions checks scheduled, cancel them.\n      if (id) clearTimeout(id);\n    }); // Emit the initial snapshot\n\n    emit(task.snapshot); // Take each update and schedule them to be emitted (see `emit`)\n\n    subscriber.add(task.on('state_changed', emit)); // task is a promise, so we can convert that to an observable,\n    // this is done for the ergonomics around making sure we don't\n    // try to push errors or completions through closed subscribers\n\n    subscriber.add(from(task).subscribe({\n      next: emit,\n      error: function (err) {\n        hasError = true;\n        error = err;\n        schedule();\n      },\n      complete: function () {\n        complete = true;\n        schedule();\n      }\n    }));\n  });\n}\n\nfunction getDownloadURL(ref) {\n  return from(getDownloadURL$1(ref));\n} // TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction getMetadata(ref) {\n  return from(getMetadata$1(ref));\n} // MARK: Breaking change (renaming put to uploadBytesResumable)\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  return new Observable(function (subscriber) {\n    var task = uploadBytesResumable$1(ref, data, metadata);\n    var subscription = fromTask(task).subscribe(subscriber);\n    return function unsubscribe() {\n      subscription.unsubscribe();\n      task.cancel();\n    };\n  }).pipe(shareReplay({\n    bufferSize: 1,\n    refCount: true\n  }));\n} // MARK: Breaking change (renaming put to uploadString)\n\n\nfunction uploadString(ref, data, format, metadata) {\n  return from(uploadString$1(ref, data, format, metadata));\n}\n\nfunction percentage(task) {\n  return fromTask(task).pipe(map(function (snapshot) {\n    return {\n      progress: snapshot.bytesTransferred / snapshot.totalBytes * 100,\n      snapshot: snapshot\n    };\n  }));\n}\n\nexport { fromTask, getDownloadURL, getMetadata, percentage, uploadBytesResumable, uploadString };","map":{"version":3,"names":["getDownloadURL","getDownloadURL$1","getMetadata","getMetadata$1","uploadBytesResumable","uploadBytesResumable$1","uploadString","uploadString$1","Observable","from","shareReplay","map","fromTask","task","subscriber","lastSnapshot","complete","hasError","error","emit","snapshot","schedule","id","setTimeout","next","add","clearTimeout","on","subscribe","err","ref","data","metadata","subscription","unsubscribe","cancel","pipe","bufferSize","refCount","format","percentage","progress","bytesTransferred","totalBytes"],"sources":["/home/manisha/Projects/angular-chat-app-master/node_modules/rxfire/storage/index.esm.js"],"sourcesContent":["import { getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nimport { Observable, from } from 'rxjs';\nimport { shareReplay, map } from 'rxjs/operators';\n\nfunction fromTask(task) {\n    return new Observable(function (subscriber) {\n        var lastSnapshot = null;\n        var complete = false;\n        var hasError = false;\n        var error = null;\n        var emit = function (snapshot) {\n            lastSnapshot = snapshot;\n            schedule();\n        };\n        var id = null;\n        /**\n         * Schedules an async event to check and emit\n         * the most recent snapshot, and complete or error\n         * if necessary.\n         */\n        var schedule = function () {\n            if (!id) {\n                id = setTimeout(function () {\n                    id = null;\n                    if (lastSnapshot)\n                        subscriber.next(lastSnapshot);\n                    if (complete)\n                        subscriber.complete();\n                    if (hasError)\n                        subscriber.error(error);\n                });\n            }\n        };\n        subscriber.add(function () {\n            // If we have any emissions checks scheduled, cancel them.\n            if (id)\n                clearTimeout(id);\n        });\n        // Emit the initial snapshot\n        emit(task.snapshot);\n        // Take each update and schedule them to be emitted (see `emit`)\n        subscriber.add(task.on('state_changed', emit));\n        // task is a promise, so we can convert that to an observable,\n        // this is done for the ergonomics around making sure we don't\n        // try to push errors or completions through closed subscribers\n        subscriber.add(from(task).subscribe({\n            next: emit,\n            error: function (err) {\n                hasError = true;\n                error = err;\n                schedule();\n            },\n            complete: function () {\n                complete = true;\n                schedule();\n            },\n        }));\n    });\n}\nfunction getDownloadURL(ref) {\n    return from(getDownloadURL$1(ref));\n}\n// TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getMetadata(ref) {\n    return from(getMetadata$1(ref));\n}\n// MARK: Breaking change (renaming put to uploadBytesResumable)\nfunction uploadBytesResumable(ref, data, metadata) {\n    return new Observable(function (subscriber) {\n        var task = uploadBytesResumable$1(ref, data, metadata);\n        var subscription = fromTask(task).subscribe(subscriber);\n        return function unsubscribe() {\n            subscription.unsubscribe();\n            task.cancel();\n        };\n    }).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n}\n// MARK: Breaking change (renaming put to uploadString)\nfunction uploadString(ref, data, format, metadata) {\n    return from(uploadString$1(ref, data, format, metadata));\n}\nfunction percentage(task) {\n    return fromTask(task).pipe(map(function (snapshot) { return ({\n        progress: (snapshot.bytesTransferred / snapshot.totalBytes) * 100,\n        snapshot: snapshot,\n    }); }));\n}\n\nexport { fromTask, getDownloadURL, getMetadata, percentage, uploadBytesResumable, uploadString };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}