{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵAppCheckInstances, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { fromTask as fromTask$1, percentage as percentage$1 } from 'rxfire/storage';\nimport { connectStorageEmulator as connectStorageEmulator$1, deleteObject as deleteObject$1, getBlob as getBlob$1, getBytes as getBytes$1, getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, getStorage as getStorage$1, getStream as getStream$1, list as list$1, listAll as listAll$1, ref as ref$1, updateMetadata as updateMetadata$1, uploadBytes as uploadBytes$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nexport * from 'firebase/storage';\n\nclass Storage {\n  constructor(auth) {\n    return auth;\n  }\n\n}\n\nconst STORAGE_PROVIDER_NAME = 'storage';\n\nclass StorageInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME);\n  }\n\n}\n\nconst storageInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME))), distinct());\nconst PROVIDED_STORAGE_INSTANCES = new InjectionToken('angularfire2.storage-instances');\n\nfunction defaultStorageInstanceFactory(provided, defaultApp) {\n  const defaultStorage = ɵgetDefaultInstanceOf(STORAGE_PROVIDER_NAME, provided, defaultApp);\n  return defaultStorage && new Storage(defaultStorage);\n}\n\nfunction storageInstanceFactory(fn) {\n  return (zone, injector) => {\n    const storage = zone.runOutsideAngular(() => fn(injector));\n    return new Storage(storage);\n  };\n}\n\nconst STORAGE_INSTANCES_PROVIDER = {\n  provide: StorageInstances,\n  deps: [[new Optional(), PROVIDED_STORAGE_INSTANCES]]\n};\nconst DEFAULT_STORAGE_INSTANCE_PROVIDER = {\n  provide: Storage,\n  useFactory: defaultStorageInstanceFactory,\n  deps: [[new Optional(), PROVIDED_STORAGE_INSTANCES], FirebaseApp]\n};\n\nclass StorageModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'gcs');\n  }\n\n  static ɵfac = function StorageModule_Factory(t) {\n    return new (t || StorageModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: StorageModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_STORAGE_INSTANCE_PROVIDER, STORAGE_INSTANCES_PROVIDER]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StorageModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_STORAGE_INSTANCE_PROVIDER, STORAGE_INSTANCES_PROVIDER]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction provideStorage(fn, ...deps) {\n  return {\n    ngModule: StorageModule,\n    providers: [{\n      provide: PROVIDED_STORAGE_INSTANCES,\n      useFactory: storageInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, // Defensively load Auth first, if provided\n      [new Optional(), AuthInstances], [new Optional(), ɵAppCheckInstances], ...deps]\n    }]\n  };\n} // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\n\nconst fromTask = ɵzoneWrap(fromTask$1, true);\nconst percentage = ɵzoneWrap(percentage$1, true); // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\nconst connectStorageEmulator = ɵzoneWrap(connectStorageEmulator$1, true);\nconst deleteObject = ɵzoneWrap(deleteObject$1, true);\nconst getBlob = ɵzoneWrap(getBlob$1, true);\nconst getBytes = ɵzoneWrap(getBytes$1, true);\nconst getDownloadURL = ɵzoneWrap(getDownloadURL$1, true);\nconst getMetadata = ɵzoneWrap(getMetadata$1, true);\nconst getStorage = ɵzoneWrap(getStorage$1, true);\nconst getStream = ɵzoneWrap(getStream$1, true);\nconst list = ɵzoneWrap(list$1, true);\nconst listAll = ɵzoneWrap(listAll$1, true);\nconst ref = ɵzoneWrap(ref$1, true);\nconst updateMetadata = ɵzoneWrap(updateMetadata$1, true);\nconst uploadBytes = ɵzoneWrap(uploadBytes$1, true);\nconst uploadBytesResumable = ɵzoneWrap(uploadBytesResumable$1, true);\nconst uploadString = ɵzoneWrap(uploadString$1, true);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Storage, StorageInstances, StorageModule, connectStorageEmulator, deleteObject, fromTask, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, percentage, provideStorage, ref, storageInstance$, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"names":["ɵgetAllInstancesOf","ɵgetDefaultInstanceOf","VERSION","ɵAngularFireSchedulers","ɵAppCheckInstances","ɵzoneWrap","timer","from","concatMap","distinct","i0","InjectionToken","Optional","NgModule","NgZone","Injector","FirebaseApp","FirebaseApps","AuthInstances","registerVersion","fromTask","fromTask$1","percentage","percentage$1","connectStorageEmulator","connectStorageEmulator$1","deleteObject","deleteObject$1","getBlob","getBlob$1","getBytes","getBytes$1","getDownloadURL","getDownloadURL$1","getMetadata","getMetadata$1","getStorage","getStorage$1","getStream","getStream$1","list","list$1","listAll","listAll$1","ref","ref$1","updateMetadata","updateMetadata$1","uploadBytes","uploadBytes$1","uploadBytesResumable","uploadBytesResumable$1","uploadString","uploadString$1","Storage","constructor","auth","STORAGE_PROVIDER_NAME","StorageInstances","storageInstance$","pipe","PROVIDED_STORAGE_INSTANCES","defaultStorageInstanceFactory","provided","defaultApp","defaultStorage","storageInstanceFactory","fn","zone","injector","storage","runOutsideAngular","STORAGE_INSTANCES_PROVIDER","provide","deps","DEFAULT_STORAGE_INSTANCE_PROVIDER","useFactory","StorageModule","full","ɵfac","ɵmod","ɵinj","type","args","providers","provideStorage","ngModule","multi"],"sources":["/home/manisha/Projects/angular-chat-app-master/node_modules/@angular/fire/fesm2022/angular-fire-storage.mjs"],"sourcesContent":["import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵAppCheckInstances, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { fromTask as fromTask$1, percentage as percentage$1 } from 'rxfire/storage';\nimport { connectStorageEmulator as connectStorageEmulator$1, deleteObject as deleteObject$1, getBlob as getBlob$1, getBytes as getBytes$1, getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, getStorage as getStorage$1, getStream as getStream$1, list as list$1, listAll as listAll$1, ref as ref$1, updateMetadata as updateMetadata$1, uploadBytes as uploadBytes$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nexport * from 'firebase/storage';\n\nclass Storage {\n    constructor(auth) {\n        return auth;\n    }\n}\nconst STORAGE_PROVIDER_NAME = 'storage';\nclass StorageInstances {\n    constructor() {\n        return ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME);\n    }\n}\nconst storageInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME))), distinct());\n\nconst PROVIDED_STORAGE_INSTANCES = new InjectionToken('angularfire2.storage-instances');\nfunction defaultStorageInstanceFactory(provided, defaultApp) {\n    const defaultStorage = ɵgetDefaultInstanceOf(STORAGE_PROVIDER_NAME, provided, defaultApp);\n    return defaultStorage && new Storage(defaultStorage);\n}\nfunction storageInstanceFactory(fn) {\n    return (zone, injector) => {\n        const storage = zone.runOutsideAngular(() => fn(injector));\n        return new Storage(storage);\n    };\n}\nconst STORAGE_INSTANCES_PROVIDER = {\n    provide: StorageInstances,\n    deps: [\n        [new Optional(), PROVIDED_STORAGE_INSTANCES],\n    ]\n};\nconst DEFAULT_STORAGE_INSTANCE_PROVIDER = {\n    provide: Storage,\n    useFactory: defaultStorageInstanceFactory,\n    deps: [\n        [new Optional(), PROVIDED_STORAGE_INSTANCES],\n        FirebaseApp,\n    ]\n};\nclass StorageModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'gcs');\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: StorageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.10\", ngImport: i0, type: StorageModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: StorageModule, providers: [\n            DEFAULT_STORAGE_INSTANCE_PROVIDER,\n            STORAGE_INSTANCES_PROVIDER,\n        ] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: StorageModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        DEFAULT_STORAGE_INSTANCE_PROVIDER,\n                        STORAGE_INSTANCES_PROVIDER,\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\nfunction provideStorage(fn, ...deps) {\n    return {\n        ngModule: StorageModule,\n        providers: [{\n                provide: PROVIDED_STORAGE_INSTANCES,\n                useFactory: storageInstanceFactory(fn),\n                multi: true,\n                deps: [\n                    NgZone,\n                    Injector,\n                    ɵAngularFireSchedulers,\n                    FirebaseApps,\n                    // Defensively load Auth first, if provided\n                    [new Optional(), AuthInstances],\n                    [new Optional(), ɵAppCheckInstances],\n                    ...deps,\n                ]\n            }]\n    };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst fromTask = ɵzoneWrap(fromTask$1, true);\nconst percentage = ɵzoneWrap(percentage$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst connectStorageEmulator = ɵzoneWrap(connectStorageEmulator$1, true);\nconst deleteObject = ɵzoneWrap(deleteObject$1, true);\nconst getBlob = ɵzoneWrap(getBlob$1, true);\nconst getBytes = ɵzoneWrap(getBytes$1, true);\nconst getDownloadURL = ɵzoneWrap(getDownloadURL$1, true);\nconst getMetadata = ɵzoneWrap(getMetadata$1, true);\nconst getStorage = ɵzoneWrap(getStorage$1, true);\nconst getStream = ɵzoneWrap(getStream$1, true);\nconst list = ɵzoneWrap(list$1, true);\nconst listAll = ɵzoneWrap(listAll$1, true);\nconst ref = ɵzoneWrap(ref$1, true);\nconst updateMetadata = ɵzoneWrap(updateMetadata$1, true);\nconst uploadBytes = ɵzoneWrap(uploadBytes$1, true);\nconst uploadBytesResumable = ɵzoneWrap(uploadBytesResumable$1, true);\nconst uploadString = ɵzoneWrap(uploadString$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Storage, StorageInstances, StorageModule, connectStorageEmulator, deleteObject, fromTask, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, percentage, provideStorage, ref, storageInstance$, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}