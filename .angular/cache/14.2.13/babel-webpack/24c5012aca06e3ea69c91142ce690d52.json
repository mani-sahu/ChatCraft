{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, NgModule, TemplateRef, Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nclass TeleportService {\n  constructor() {\n    this.outlets = new BehaviorSubject('');\n    this.asObservable = this.outlets.asObservable();\n    this.ports = new Map();\n  }\n\n  outlet$(name) {\n    return this.asObservable.pipe(filter(current => current === name), map(name => this.ports.get(name)));\n  }\n\n  newOutlet(name) {\n    this.outlets.next(name);\n  }\n\n}\n\nTeleportService.ɵfac = function TeleportService_Factory(t) {\n  return new (t || TeleportService)();\n};\n\nTeleportService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TeleportService,\n  factory: TeleportService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TeleportService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nclass TeleportOutletDirective {\n  constructor(vcr, service) {\n    this.vcr = vcr;\n    this.service = service;\n  }\n\n  ngOnChanges(changes) {\n    // The `teleportOutlet` might be `null|undefined`, but we don't want nullable values to be used\n    // as keys for the `ports` map.\n    if (changes.teleportOutlet && typeof this.teleportOutlet === 'string') {\n      this.service.ports.set(this.teleportOutlet, this.vcr);\n      this.service.newOutlet(this.teleportOutlet);\n    }\n  }\n\n  ngOnDestroy() {\n    this.service.ports.delete(this.teleportOutlet);\n  }\n\n}\n\nTeleportOutletDirective.ɵfac = function TeleportOutletDirective_Factory(t) {\n  return new (t || TeleportOutletDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(TeleportService));\n};\n\nTeleportOutletDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TeleportOutletDirective,\n  selectors: [[\"\", \"teleportOutlet\", \"\"]],\n  inputs: {\n    teleportOutlet: \"teleportOutlet\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TeleportOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[teleportOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: TeleportService\n    }];\n  }, {\n    teleportOutlet: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TeleportDirective {\n  constructor(tpl, service) {\n    this.tpl = tpl;\n    this.service = service;\n    this.subscription = null;\n  }\n\n  ngOnChanges(changes) {\n    if (changes.teleportTo && typeof this.teleportTo === 'string') {\n      this.dispose();\n      this.subscription = this.service.outlet$(this.teleportTo).subscribe(outlet => {\n        if (outlet) {\n          this.viewRef = outlet.createEmbeddedView(this.tpl);\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.dispose();\n  }\n\n  dispose() {\n    this.subscription?.unsubscribe();\n    this.subscription = null;\n    this.viewRef?.destroy();\n  }\n\n}\n\nTeleportDirective.ɵfac = function TeleportDirective_Factory(t) {\n  return new (t || TeleportDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(TeleportService));\n};\n\nTeleportDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TeleportDirective,\n  selectors: [[\"\", \"teleportTo\", \"\"]],\n  inputs: {\n    teleportTo: \"teleportTo\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TeleportDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[teleportTo]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: TeleportService\n    }];\n  }, {\n    teleportTo: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TeleportModule {}\n\nTeleportModule.ɵfac = function TeleportModule_Factory(t) {\n  return new (t || TeleportModule)();\n};\n\nTeleportModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TeleportModule\n});\nTeleportModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TeleportModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TeleportDirective, TeleportOutletDirective],\n      exports: [TeleportDirective, TeleportOutletDirective]\n    }]\n  }], null, null);\n})();\n\nfunction isTemplateRef(value) {\n  return value instanceof TemplateRef;\n}\n\nfunction isComponent(value) {\n  return typeof value === 'function';\n}\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nclass DynamicViewComponent {}\n\nDynamicViewComponent.ɵfac = function DynamicViewComponent_Factory(t) {\n  return new (t || DynamicViewComponent)();\n};\n\nDynamicViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DynamicViewComponent,\n  selectors: [[\"dynamic-view\"]],\n  inputs: {\n    content: \"content\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"innerHTML\"]],\n  template: function DynamicViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"innerHTML\", ctx.content, i0.ɵɵsanitizeHtml);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicViewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'dynamic-view',\n      template: ` <div [innerHTML]=\"content\"></div> `\n    }]\n  }], null, {\n    content: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TplRef {\n  constructor(args) {\n    this.args = args;\n    this.wrapper = null;\n\n    if (this.args.vcr) {\n      this.viewRef = this.args.vcr.createEmbeddedView(this.args.tpl, this.args.context || {});\n      this.viewRef.detectChanges();\n    } else {\n      this.viewRef = this.args.tpl.createEmbeddedView(this.args.context || {});\n      this.viewRef.detectChanges();\n      this.args.appRef.attachView(this.viewRef);\n    }\n  }\n\n  detectChanges() {\n    this.viewRef.detectChanges();\n  }\n\n  getElement() {\n    const rootNodes = this.viewRef.rootNodes;\n\n    if (rootNodes.length === 1 && rootNodes[0] === Node.ELEMENT_NODE) {\n      this.element = rootNodes[0];\n    } else {\n      this.element = document.createElement('div');\n      this.element.append(...rootNodes);\n    }\n\n    return this.element;\n  }\n\n  destroy() {\n    if (this.viewRef.rootNodes[0] !== 1) {\n      this.element?.parentNode.removeChild(this.element);\n      this.element = null;\n    }\n\n    if (!this.args.vcr) {\n      this.args.appRef.detachView(this.viewRef);\n    }\n\n    this.viewRef.destroy();\n    this.viewRef = null;\n  }\n\n}\n\nclass StringRef {\n  constructor(value) {\n    this.value = value;\n  }\n\n  getElement() {\n    return this.value;\n  }\n\n  detectChanges() {}\n\n  destroy() {}\n\n}\n\nclass CompRef {\n  constructor(options) {\n    this.options = options;\n\n    if (options.vcr) {\n      this.compRef = options.vcr.createComponent(options.component, {\n        index: options.vcr.length,\n        injector: options.injector || options.vcr.injector\n      });\n    } else {\n      const factory = options.resolver.resolveComponentFactory(options.component);\n      this.compRef = factory.create(options.injector);\n      options.appRef.attachView(this.compRef.hostView);\n    }\n  }\n\n  get ref() {\n    return this.compRef;\n  }\n\n  setInput(input, value) {\n    this.compRef.instance[input] = value;\n    return this;\n  }\n\n  setInputs(inputs) {\n    Object.keys(inputs).forEach(input => {\n      this.compRef.instance[input] = inputs[input];\n    });\n    return this;\n  }\n\n  detectChanges() {\n    this.compRef.hostView.detectChanges();\n    return this;\n  }\n\n  appendTo(container) {\n    container.appendChild(this.getElement());\n    return this;\n  }\n\n  removeFrom(container) {\n    container.removeChild(this.getElement());\n    return this;\n  }\n\n  getRawContent() {\n    return this.getElement().outerHTML;\n  }\n\n  getElement() {\n    return this.compRef.location.nativeElement;\n  }\n\n  destroy() {\n    this.compRef.destroy();\n    !this.options.vcr && this.options.appRef.detachView(this.compRef.hostView);\n    this.compRef = null;\n  }\n\n}\n\nclass ViewService {\n  constructor(resolver, injector, appRef) {\n    this.resolver = resolver;\n    this.injector = injector;\n    this.appRef = appRef;\n  }\n\n  createComponent(component, options = {}) {\n    return new CompRef({\n      component,\n      vcr: options.vcr,\n      injector: options.injector || this.injector,\n      appRef: this.appRef,\n      resolver: this.resolver\n    });\n  }\n\n  createTemplate(tpl, options = {}) {\n    return new TplRef({\n      vcr: options.vcr,\n      appRef: this.appRef,\n      tpl,\n      context: options.context\n    });\n  }\n\n  createView(content, viewOptions = {}) {\n    if (isTemplateRef(content)) {\n      return this.createTemplate(content, viewOptions);\n    } else if (isComponent(content)) {\n      return this.createComponent(content, viewOptions);\n    } else if (isString(content)) {\n      return new StringRef(content);\n    } else {\n      throw 'Type of content is not supported';\n    }\n  }\n\n}\n\nViewService.ɵfac = function ViewService_Factory(t) {\n  return new (t || ViewService)(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.ApplicationRef));\n};\n\nViewService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ViewService,\n  factory: ViewService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ViewService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.ApplicationRef\n    }];\n  }, null);\n})();\n\nclass DynamicViewDirective {\n  constructor(defaultTpl, vcr, viewService) {\n    this.defaultTpl = defaultTpl;\n    this.vcr = vcr;\n    this.viewService = viewService;\n  }\n\n  ngOnInit() {\n    this.resolveContentType();\n  }\n\n  ngOnChanges(changes) {\n    if (changes.view && !changes.view.isFirstChange()) {\n      this.resolveContentType();\n    }\n  }\n\n  resolveContentType() {\n    this.viewRef?.destroy();\n\n    if (isString(this.view)) {\n      this.viewRef = this.viewService.createComponent(DynamicViewComponent, {\n        vcr: this.vcr,\n        injector: this.injector\n      });\n      this.viewRef.setInput('content', this.view).detectChanges();\n    } else {\n      this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {\n        vcr: this.vcr,\n        injector: this.injector ?? this.vcr.injector,\n        context: this.context\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.viewRef?.destroy();\n  }\n\n}\n\nDynamicViewDirective.ɵfac = function DynamicViewDirective_Factory(t) {\n  return new (t || DynamicViewDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(ViewService));\n};\n\nDynamicViewDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DynamicViewDirective,\n  selectors: [[\"\", \"dynamicView\", \"\"]],\n  inputs: {\n    view: [\"dynamicView\", \"view\"],\n    injector: [\"dynamicViewInjector\", \"injector\"],\n    context: [\"dynamicViewContext\", \"context\"]\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicViewDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[dynamicView]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: ViewService\n    }];\n  }, {\n    view: [{\n      type: Input,\n      args: ['dynamicView']\n    }],\n    injector: [{\n      type: Input,\n      args: ['dynamicViewInjector']\n    }],\n    context: [{\n      type: Input,\n      args: ['dynamicViewContext']\n    }]\n  });\n})();\n\nclass DynamicViewModule {}\n\nDynamicViewModule.ɵfac = function DynamicViewModule_Factory(t) {\n  return new (t || DynamicViewModule)();\n};\n\nDynamicViewModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DynamicViewModule\n});\nDynamicViewModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicViewModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [DynamicViewDirective, DynamicViewComponent],\n      exports: [DynamicViewDirective]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of overview\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CompRef, DynamicViewDirective, DynamicViewModule, StringRef, TeleportDirective, TeleportModule, TeleportOutletDirective, TplRef, ViewService, isComponent, isString, isTemplateRef };","map":{"version":3,"names":["i0","Injectable","Directive","Input","NgModule","TemplateRef","Component","BehaviorSubject","filter","map","TeleportService","constructor","outlets","asObservable","ports","Map","outlet$","name","pipe","current","get","newOutlet","next","ɵfac","ɵprov","type","args","providedIn","TeleportOutletDirective","vcr","service","ngOnChanges","changes","teleportOutlet","set","ngOnDestroy","delete","ViewContainerRef","ɵdir","selector","TeleportDirective","tpl","subscription","teleportTo","dispose","subscribe","outlet","viewRef","createEmbeddedView","unsubscribe","destroy","TeleportModule","ɵmod","ɵinj","declarations","exports","isTemplateRef","value","isComponent","isString","DynamicViewComponent","ɵcmp","template","content","TplRef","wrapper","context","detectChanges","appRef","attachView","getElement","rootNodes","length","Node","ELEMENT_NODE","element","document","createElement","append","parentNode","removeChild","detachView","StringRef","CompRef","options","compRef","createComponent","component","index","injector","factory","resolver","resolveComponentFactory","create","hostView","ref","setInput","input","instance","setInputs","inputs","Object","keys","forEach","appendTo","container","appendChild","removeFrom","getRawContent","outerHTML","location","nativeElement","ViewService","createTemplate","createView","viewOptions","ComponentFactoryResolver","Injector","ApplicationRef","DynamicViewDirective","defaultTpl","viewService","ngOnInit","resolveContentType","view","isFirstChange","DynamicViewModule"],"sources":["/home/manisha/Projects/angular-chat-app-master/node_modules/@ngneat/overview/fesm2020/ngneat-overview.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, NgModule, TemplateRef, Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nclass TeleportService {\n    constructor() {\n        this.outlets = new BehaviorSubject('');\n        this.asObservable = this.outlets.asObservable();\n        this.ports = new Map();\n    }\n    outlet$(name) {\n        return this.asObservable.pipe(filter(current => current === name), map(name => this.ports.get(name)));\n    }\n    newOutlet(name) {\n        this.outlets.next(name);\n    }\n}\nTeleportService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nTeleportService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }] });\n\nclass TeleportOutletDirective {\n    constructor(vcr, service) {\n        this.vcr = vcr;\n        this.service = service;\n    }\n    ngOnChanges(changes) {\n        // The `teleportOutlet` might be `null|undefined`, but we don't want nullable values to be used\n        // as keys for the `ports` map.\n        if (changes.teleportOutlet && typeof this.teleportOutlet === 'string') {\n            this.service.ports.set(this.teleportOutlet, this.vcr);\n            this.service.newOutlet(this.teleportOutlet);\n        }\n    }\n    ngOnDestroy() {\n        this.service.ports.delete(this.teleportOutlet);\n    }\n}\nTeleportOutletDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportOutletDirective, deps: [{ token: i0.ViewContainerRef }, { token: TeleportService }], target: i0.ɵɵFactoryTarget.Directive });\nTeleportOutletDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: TeleportOutletDirective, selector: \"[teleportOutlet]\", inputs: { teleportOutlet: \"teleportOutlet\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportOutletDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[teleportOutlet]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: TeleportService }]; }, propDecorators: { teleportOutlet: [{\n                type: Input\n            }] } });\n\nclass TeleportDirective {\n    constructor(tpl, service) {\n        this.tpl = tpl;\n        this.service = service;\n        this.subscription = null;\n    }\n    ngOnChanges(changes) {\n        if (changes.teleportTo && typeof this.teleportTo === 'string') {\n            this.dispose();\n            this.subscription = this.service.outlet$(this.teleportTo).subscribe((outlet) => {\n                if (outlet) {\n                    this.viewRef = outlet.createEmbeddedView(this.tpl);\n                }\n            });\n        }\n    }\n    ngOnDestroy() {\n        this.dispose();\n    }\n    dispose() {\n        this.subscription?.unsubscribe();\n        this.subscription = null;\n        this.viewRef?.destroy();\n    }\n}\nTeleportDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportDirective, deps: [{ token: i0.TemplateRef }, { token: TeleportService }], target: i0.ɵɵFactoryTarget.Directive });\nTeleportDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: TeleportDirective, selector: \"[teleportTo]\", inputs: { teleportTo: \"teleportTo\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[teleportTo]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: TeleportService }]; }, propDecorators: { teleportTo: [{\n                type: Input\n            }] } });\nclass TeleportModule {\n}\nTeleportModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTeleportModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportModule, declarations: [TeleportDirective, TeleportOutletDirective], exports: [TeleportDirective, TeleportOutletDirective] });\nTeleportModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TeleportDirective, TeleportOutletDirective],\n                    exports: [TeleportDirective, TeleportOutletDirective],\n                }]\n        }] });\n\nfunction isTemplateRef(value) {\n    return value instanceof TemplateRef;\n}\nfunction isComponent(value) {\n    return typeof value === 'function';\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\n\nclass DynamicViewComponent {\n}\nDynamicViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDynamicViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.1\", type: DynamicViewComponent, selector: \"dynamic-view\", inputs: { content: \"content\" }, ngImport: i0, template: ` <div [innerHTML]=\"content\"></div> `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'dynamic-view',\n                    template: ` <div [innerHTML]=\"content\"></div> `,\n                }]\n        }], propDecorators: { content: [{\n                type: Input\n            }] } });\n\nclass TplRef {\n    constructor(args) {\n        this.args = args;\n        this.wrapper = null;\n        if (this.args.vcr) {\n            this.viewRef = this.args.vcr.createEmbeddedView(this.args.tpl, this.args.context || {});\n            this.viewRef.detectChanges();\n        }\n        else {\n            this.viewRef = this.args.tpl.createEmbeddedView(this.args.context || {});\n            this.viewRef.detectChanges();\n            this.args.appRef.attachView(this.viewRef);\n        }\n    }\n    detectChanges() {\n        this.viewRef.detectChanges();\n    }\n    getElement() {\n        const rootNodes = this.viewRef.rootNodes;\n        if (rootNodes.length === 1 && rootNodes[0] === Node.ELEMENT_NODE) {\n            this.element = rootNodes[0];\n        }\n        else {\n            this.element = document.createElement('div');\n            this.element.append(...rootNodes);\n        }\n        return this.element;\n    }\n    destroy() {\n        if (this.viewRef.rootNodes[0] !== 1) {\n            this.element?.parentNode.removeChild(this.element);\n            this.element = null;\n        }\n        if (!this.args.vcr) {\n            this.args.appRef.detachView(this.viewRef);\n        }\n        this.viewRef.destroy();\n        this.viewRef = null;\n    }\n}\n\nclass StringRef {\n    constructor(value) {\n        this.value = value;\n    }\n    getElement() {\n        return this.value;\n    }\n    detectChanges() { }\n    destroy() { }\n}\n\nclass CompRef {\n    constructor(options) {\n        this.options = options;\n        if (options.vcr) {\n            this.compRef = options.vcr.createComponent(options.component, {\n                index: options.vcr.length,\n                injector: options.injector || options.vcr.injector,\n            });\n        }\n        else {\n            const factory = options.resolver.resolveComponentFactory(options.component);\n            this.compRef = factory.create(options.injector);\n            options.appRef.attachView(this.compRef.hostView);\n        }\n    }\n    get ref() {\n        return this.compRef;\n    }\n    setInput(input, value) {\n        this.compRef.instance[input] = value;\n        return this;\n    }\n    setInputs(inputs) {\n        Object.keys(inputs).forEach((input) => {\n            this.compRef.instance[input] = inputs[input];\n        });\n        return this;\n    }\n    detectChanges() {\n        this.compRef.hostView.detectChanges();\n        return this;\n    }\n    appendTo(container) {\n        container.appendChild(this.getElement());\n        return this;\n    }\n    removeFrom(container) {\n        container.removeChild(this.getElement());\n        return this;\n    }\n    getRawContent() {\n        return this.getElement().outerHTML;\n    }\n    getElement() {\n        return this.compRef.location.nativeElement;\n    }\n    destroy() {\n        this.compRef.destroy();\n        !this.options.vcr && this.options.appRef.detachView(this.compRef.hostView);\n        this.compRef = null;\n    }\n}\n\nclass ViewService {\n    constructor(resolver, injector, appRef) {\n        this.resolver = resolver;\n        this.injector = injector;\n        this.appRef = appRef;\n    }\n    createComponent(component, options = {}) {\n        return new CompRef({\n            component,\n            vcr: options.vcr,\n            injector: options.injector || this.injector,\n            appRef: this.appRef,\n            resolver: this.resolver,\n        });\n    }\n    createTemplate(tpl, options = {}) {\n        return new TplRef({\n            vcr: options.vcr,\n            appRef: this.appRef,\n            tpl,\n            context: options.context,\n        });\n    }\n    createView(content, viewOptions = {}) {\n        if (isTemplateRef(content)) {\n            return this.createTemplate(content, viewOptions);\n        }\n        else if (isComponent(content)) {\n            return this.createComponent(content, viewOptions);\n        }\n        else if (isString(content)) {\n            return new StringRef(content);\n        }\n        else {\n            throw 'Type of content is not supported';\n        }\n    }\n}\nViewService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ViewService, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.Injector }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Injectable });\nViewService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ViewService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ViewService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.ApplicationRef }]; } });\n\nclass DynamicViewDirective {\n    constructor(defaultTpl, vcr, viewService) {\n        this.defaultTpl = defaultTpl;\n        this.vcr = vcr;\n        this.viewService = viewService;\n    }\n    ngOnInit() {\n        this.resolveContentType();\n    }\n    ngOnChanges(changes) {\n        if (changes.view && !changes.view.isFirstChange()) {\n            this.resolveContentType();\n        }\n    }\n    resolveContentType() {\n        this.viewRef?.destroy();\n        if (isString(this.view)) {\n            this.viewRef = this.viewService.createComponent(DynamicViewComponent, {\n                vcr: this.vcr,\n                injector: this.injector,\n            });\n            this.viewRef.setInput('content', this.view).detectChanges();\n        }\n        else {\n            this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {\n                vcr: this.vcr,\n                injector: this.injector ?? this.vcr.injector,\n                context: this.context,\n            });\n        }\n    }\n    ngOnDestroy() {\n        this.viewRef?.destroy();\n    }\n}\nDynamicViewDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: ViewService }], target: i0.ɵɵFactoryTarget.Directive });\nDynamicViewDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: DynamicViewDirective, selector: \"[dynamicView]\", inputs: { view: [\"dynamicView\", \"view\"], injector: [\"dynamicViewInjector\", \"injector\"], context: [\"dynamicViewContext\", \"context\"] }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[dynamicView]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: ViewService }]; }, propDecorators: { view: [{\n                type: Input,\n                args: ['dynamicView']\n            }], injector: [{\n                type: Input,\n                args: ['dynamicViewInjector']\n            }], context: [{\n                type: Input,\n                args: ['dynamicViewContext']\n            }] } });\nclass DynamicViewModule {\n}\nDynamicViewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDynamicViewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewModule, declarations: [DynamicViewDirective, DynamicViewComponent], exports: [DynamicViewDirective] });\nDynamicViewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [DynamicViewDirective, DynamicViewComponent],\n                    exports: [DynamicViewDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of overview\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CompRef, DynamicViewDirective, DynamicViewModule, StringRef, TeleportDirective, TeleportModule, TeleportOutletDirective, TplRef, ViewService, isComponent, isString, isTemplateRef };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}