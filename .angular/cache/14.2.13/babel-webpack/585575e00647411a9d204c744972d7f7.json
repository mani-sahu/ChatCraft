{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵAppCheckInstances, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { authState as authState$1, user as user$1, idToken as idToken$1 } from 'rxfire/auth';\nimport { applyActionCode as applyActionCode$1, beforeAuthStateChanged as beforeAuthStateChanged$1, checkActionCode as checkActionCode$1, confirmPasswordReset as confirmPasswordReset$1, connectAuthEmulator as connectAuthEmulator$1, createUserWithEmailAndPassword as createUserWithEmailAndPassword$1, deleteUser as deleteUser$1, fetchSignInMethodsForEmail as fetchSignInMethodsForEmail$1, getAdditionalUserInfo as getAdditionalUserInfo$1, getAuth as getAuth$1, getIdToken as getIdToken$1, getIdTokenResult as getIdTokenResult$1, getMultiFactorResolver as getMultiFactorResolver$1, getRedirectResult as getRedirectResult$1, initializeAuth as initializeAuth$1, initializeRecaptchaConfig as initializeRecaptchaConfig$1, isSignInWithEmailLink as isSignInWithEmailLink$1, linkWithCredential as linkWithCredential$1, linkWithPhoneNumber as linkWithPhoneNumber$1, linkWithPopup as linkWithPopup$1, linkWithRedirect as linkWithRedirect$1, multiFactor as multiFactor$1, onAuthStateChanged as onAuthStateChanged$1, onIdTokenChanged as onIdTokenChanged$1, parseActionCodeURL as parseActionCodeURL$1, reauthenticateWithCredential as reauthenticateWithCredential$1, reauthenticateWithPhoneNumber as reauthenticateWithPhoneNumber$1, reauthenticateWithPopup as reauthenticateWithPopup$1, reauthenticateWithRedirect as reauthenticateWithRedirect$1, reload as reload$1, sendEmailVerification as sendEmailVerification$1, sendPasswordResetEmail as sendPasswordResetEmail$1, sendSignInLinkToEmail as sendSignInLinkToEmail$1, setPersistence as setPersistence$1, signInAnonymously as signInAnonymously$1, signInWithCredential as signInWithCredential$1, signInWithCustomToken as signInWithCustomToken$1, signInWithEmailAndPassword as signInWithEmailAndPassword$1, signInWithEmailLink as signInWithEmailLink$1, signInWithPhoneNumber as signInWithPhoneNumber$1, signInWithPopup as signInWithPopup$1, signInWithRedirect as signInWithRedirect$1, signOut as signOut$1, unlink as unlink$1, updateCurrentUser as updateCurrentUser$1, updateEmail as updateEmail$1, updatePassword as updatePassword$1, updatePhoneNumber as updatePhoneNumber$1, updateProfile as updateProfile$1, useDeviceLanguage as useDeviceLanguage$1, validatePassword as validatePassword$1, verifyBeforeUpdateEmail as verifyBeforeUpdateEmail$1, verifyPasswordResetCode as verifyPasswordResetCode$1 } from 'firebase/auth';\nexport * from 'firebase/auth';\nconst AUTH_PROVIDER_NAME = 'auth';\n\nclass Auth {\n  constructor(auth) {\n    return auth;\n  }\n\n}\n\nclass AuthInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(AUTH_PROVIDER_NAME);\n  }\n\n}\n\nconst authInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(AUTH_PROVIDER_NAME))), distinct());\nconst PROVIDED_AUTH_INSTANCES = new InjectionToken('angularfire2.auth-instances');\n\nfunction defaultAuthInstanceFactory(provided, defaultApp) {\n  const defaultAuth = ɵgetDefaultInstanceOf(AUTH_PROVIDER_NAME, provided, defaultApp);\n  return defaultAuth && new Auth(defaultAuth);\n}\n\nfunction authInstanceFactory(fn) {\n  return (zone, injector) => {\n    const auth = zone.runOutsideAngular(() => fn(injector));\n    return new Auth(auth);\n  };\n}\n\nconst AUTH_INSTANCES_PROVIDER = {\n  provide: AuthInstances,\n  deps: [[new Optional(), PROVIDED_AUTH_INSTANCES]]\n};\nconst DEFAULT_AUTH_INSTANCE_PROVIDER = {\n  provide: Auth,\n  useFactory: defaultAuthInstanceFactory,\n  deps: [[new Optional(), PROVIDED_AUTH_INSTANCES], FirebaseApp]\n};\n\nclass AuthModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'auth');\n  }\n\n  static ɵfac = function AuthModule_Factory(t) {\n    return new (t || AuthModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AuthModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction provideAuth(fn, ...deps) {\n  return {\n    ngModule: AuthModule,\n    providers: [{\n      provide: PROVIDED_AUTH_INSTANCES,\n      useFactory: authInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, [new Optional(), ɵAppCheckInstances], ...deps]\n    }]\n  };\n} // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\n\nconst authState = ɵzoneWrap(authState$1, true);\nconst user = ɵzoneWrap(user$1, true);\nconst idToken = ɵzoneWrap(idToken$1, true); // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\nconst applyActionCode = ɵzoneWrap(applyActionCode$1, true);\nconst beforeAuthStateChanged = ɵzoneWrap(beforeAuthStateChanged$1, true);\nconst checkActionCode = ɵzoneWrap(checkActionCode$1, true);\nconst confirmPasswordReset = ɵzoneWrap(confirmPasswordReset$1, true);\nconst connectAuthEmulator = ɵzoneWrap(connectAuthEmulator$1, true);\nconst createUserWithEmailAndPassword = ɵzoneWrap(createUserWithEmailAndPassword$1, true);\nconst deleteUser = ɵzoneWrap(deleteUser$1, true);\nconst fetchSignInMethodsForEmail = ɵzoneWrap(fetchSignInMethodsForEmail$1, true);\nconst getAdditionalUserInfo = ɵzoneWrap(getAdditionalUserInfo$1, true);\nconst getAuth = ɵzoneWrap(getAuth$1, true);\nconst getIdToken = ɵzoneWrap(getIdToken$1, true);\nconst getIdTokenResult = ɵzoneWrap(getIdTokenResult$1, true);\nconst getMultiFactorResolver = ɵzoneWrap(getMultiFactorResolver$1, true);\nconst getRedirectResult = ɵzoneWrap(getRedirectResult$1, true);\nconst initializeAuth = ɵzoneWrap(initializeAuth$1, true);\nconst initializeRecaptchaConfig = ɵzoneWrap(initializeRecaptchaConfig$1, true);\nconst isSignInWithEmailLink = ɵzoneWrap(isSignInWithEmailLink$1, true);\nconst linkWithCredential = ɵzoneWrap(linkWithCredential$1, true);\nconst linkWithPhoneNumber = ɵzoneWrap(linkWithPhoneNumber$1, true);\nconst linkWithPopup = ɵzoneWrap(linkWithPopup$1, true);\nconst linkWithRedirect = ɵzoneWrap(linkWithRedirect$1, true);\nconst multiFactor = ɵzoneWrap(multiFactor$1, true);\nconst onAuthStateChanged = ɵzoneWrap(onAuthStateChanged$1, true);\nconst onIdTokenChanged = ɵzoneWrap(onIdTokenChanged$1, true);\nconst parseActionCodeURL = ɵzoneWrap(parseActionCodeURL$1, true);\nconst reauthenticateWithCredential = ɵzoneWrap(reauthenticateWithCredential$1, true);\nconst reauthenticateWithPhoneNumber = ɵzoneWrap(reauthenticateWithPhoneNumber$1, true);\nconst reauthenticateWithPopup = ɵzoneWrap(reauthenticateWithPopup$1, true);\nconst reauthenticateWithRedirect = ɵzoneWrap(reauthenticateWithRedirect$1, true);\nconst reload = ɵzoneWrap(reload$1, true);\nconst sendEmailVerification = ɵzoneWrap(sendEmailVerification$1, true);\nconst sendPasswordResetEmail = ɵzoneWrap(sendPasswordResetEmail$1, true);\nconst sendSignInLinkToEmail = ɵzoneWrap(sendSignInLinkToEmail$1, true);\nconst setPersistence = ɵzoneWrap(setPersistence$1, true);\nconst signInAnonymously = ɵzoneWrap(signInAnonymously$1, true);\nconst signInWithCredential = ɵzoneWrap(signInWithCredential$1, true);\nconst signInWithCustomToken = ɵzoneWrap(signInWithCustomToken$1, true);\nconst signInWithEmailAndPassword = ɵzoneWrap(signInWithEmailAndPassword$1, true);\nconst signInWithEmailLink = ɵzoneWrap(signInWithEmailLink$1, true);\nconst signInWithPhoneNumber = ɵzoneWrap(signInWithPhoneNumber$1, true);\nconst signInWithPopup = ɵzoneWrap(signInWithPopup$1, true);\nconst signInWithRedirect = ɵzoneWrap(signInWithRedirect$1, true);\nconst signOut = ɵzoneWrap(signOut$1, true);\nconst unlink = ɵzoneWrap(unlink$1, true);\nconst updateCurrentUser = ɵzoneWrap(updateCurrentUser$1, true);\nconst updateEmail = ɵzoneWrap(updateEmail$1, true);\nconst updatePassword = ɵzoneWrap(updatePassword$1, true);\nconst updatePhoneNumber = ɵzoneWrap(updatePhoneNumber$1, true);\nconst updateProfile = ɵzoneWrap(updateProfile$1, true);\nconst useDeviceLanguage = ɵzoneWrap(useDeviceLanguage$1, true);\nconst validatePassword = ɵzoneWrap(validatePassword$1, true);\nconst verifyBeforeUpdateEmail = ɵzoneWrap(verifyBeforeUpdateEmail$1, true);\nconst verifyPasswordResetCode = ɵzoneWrap(verifyPasswordResetCode$1, true);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Auth, AuthInstances, AuthModule, applyActionCode, authInstance$, authState, beforeAuthStateChanged, checkActionCode, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, deleteUser, fetchSignInMethodsForEmail, getAdditionalUserInfo, getAuth, getIdToken, getIdTokenResult, getMultiFactorResolver, getRedirectResult, idToken, initializeAuth, initializeRecaptchaConfig, isSignInWithEmailLink, linkWithCredential, linkWithPhoneNumber, linkWithPopup, linkWithRedirect, multiFactor, onAuthStateChanged, onIdTokenChanged, parseActionCodeURL, provideAuth, reauthenticateWithCredential, reauthenticateWithPhoneNumber, reauthenticateWithPopup, reauthenticateWithRedirect, reload, sendEmailVerification, sendPasswordResetEmail, sendSignInLinkToEmail, setPersistence, signInAnonymously, signInWithCredential, signInWithCustomToken, signInWithEmailAndPassword, signInWithEmailLink, signInWithPhoneNumber, signInWithPopup, signInWithRedirect, signOut, unlink, updateCurrentUser, updateEmail, updatePassword, updatePhoneNumber, updateProfile, useDeviceLanguage, user, validatePassword, verifyBeforeUpdateEmail, verifyPasswordResetCode };","map":{"version":3,"names":["ɵgetAllInstancesOf","ɵgetDefaultInstanceOf","VERSION","ɵAngularFireSchedulers","ɵAppCheckInstances","ɵzoneWrap","timer","from","concatMap","distinct","i0","InjectionToken","Optional","NgModule","NgZone","Injector","FirebaseApp","FirebaseApps","registerVersion","authState","authState$1","user","user$1","idToken","idToken$1","applyActionCode","applyActionCode$1","beforeAuthStateChanged","beforeAuthStateChanged$1","checkActionCode","checkActionCode$1","confirmPasswordReset","confirmPasswordReset$1","connectAuthEmulator","connectAuthEmulator$1","createUserWithEmailAndPassword","createUserWithEmailAndPassword$1","deleteUser","deleteUser$1","fetchSignInMethodsForEmail","fetchSignInMethodsForEmail$1","getAdditionalUserInfo","getAdditionalUserInfo$1","getAuth","getAuth$1","getIdToken","getIdToken$1","getIdTokenResult","getIdTokenResult$1","getMultiFactorResolver","getMultiFactorResolver$1","getRedirectResult","getRedirectResult$1","initializeAuth","initializeAuth$1","initializeRecaptchaConfig","initializeRecaptchaConfig$1","isSignInWithEmailLink","isSignInWithEmailLink$1","linkWithCredential","linkWithCredential$1","linkWithPhoneNumber","linkWithPhoneNumber$1","linkWithPopup","linkWithPopup$1","linkWithRedirect","linkWithRedirect$1","multiFactor","multiFactor$1","onAuthStateChanged","onAuthStateChanged$1","onIdTokenChanged","onIdTokenChanged$1","parseActionCodeURL","parseActionCodeURL$1","reauthenticateWithCredential","reauthenticateWithCredential$1","reauthenticateWithPhoneNumber","reauthenticateWithPhoneNumber$1","reauthenticateWithPopup","reauthenticateWithPopup$1","reauthenticateWithRedirect","reauthenticateWithRedirect$1","reload","reload$1","sendEmailVerification","sendEmailVerification$1","sendPasswordResetEmail","sendPasswordResetEmail$1","sendSignInLinkToEmail","sendSignInLinkToEmail$1","setPersistence","setPersistence$1","signInAnonymously","signInAnonymously$1","signInWithCredential","signInWithCredential$1","signInWithCustomToken","signInWithCustomToken$1","signInWithEmailAndPassword","signInWithEmailAndPassword$1","signInWithEmailLink","signInWithEmailLink$1","signInWithPhoneNumber","signInWithPhoneNumber$1","signInWithPopup","signInWithPopup$1","signInWithRedirect","signInWithRedirect$1","signOut","signOut$1","unlink","unlink$1","updateCurrentUser","updateCurrentUser$1","updateEmail","updateEmail$1","updatePassword","updatePassword$1","updatePhoneNumber","updatePhoneNumber$1","updateProfile","updateProfile$1","useDeviceLanguage","useDeviceLanguage$1","validatePassword","validatePassword$1","verifyBeforeUpdateEmail","verifyBeforeUpdateEmail$1","verifyPasswordResetCode","verifyPasswordResetCode$1","AUTH_PROVIDER_NAME","Auth","constructor","auth","AuthInstances","authInstance$","pipe","PROVIDED_AUTH_INSTANCES","defaultAuthInstanceFactory","provided","defaultApp","defaultAuth","authInstanceFactory","fn","zone","injector","runOutsideAngular","AUTH_INSTANCES_PROVIDER","provide","deps","DEFAULT_AUTH_INSTANCE_PROVIDER","useFactory","AuthModule","full","ɵfac","ɵmod","ɵinj","type","args","providers","provideAuth","ngModule","multi"],"sources":["/home/manisha/Projects/angular-chat-app-master/node_modules/@angular/fire/fesm2022/angular-fire-auth.mjs"],"sourcesContent":["import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵAppCheckInstances, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { authState as authState$1, user as user$1, idToken as idToken$1 } from 'rxfire/auth';\nimport { applyActionCode as applyActionCode$1, beforeAuthStateChanged as beforeAuthStateChanged$1, checkActionCode as checkActionCode$1, confirmPasswordReset as confirmPasswordReset$1, connectAuthEmulator as connectAuthEmulator$1, createUserWithEmailAndPassword as createUserWithEmailAndPassword$1, deleteUser as deleteUser$1, fetchSignInMethodsForEmail as fetchSignInMethodsForEmail$1, getAdditionalUserInfo as getAdditionalUserInfo$1, getAuth as getAuth$1, getIdToken as getIdToken$1, getIdTokenResult as getIdTokenResult$1, getMultiFactorResolver as getMultiFactorResolver$1, getRedirectResult as getRedirectResult$1, initializeAuth as initializeAuth$1, initializeRecaptchaConfig as initializeRecaptchaConfig$1, isSignInWithEmailLink as isSignInWithEmailLink$1, linkWithCredential as linkWithCredential$1, linkWithPhoneNumber as linkWithPhoneNumber$1, linkWithPopup as linkWithPopup$1, linkWithRedirect as linkWithRedirect$1, multiFactor as multiFactor$1, onAuthStateChanged as onAuthStateChanged$1, onIdTokenChanged as onIdTokenChanged$1, parseActionCodeURL as parseActionCodeURL$1, reauthenticateWithCredential as reauthenticateWithCredential$1, reauthenticateWithPhoneNumber as reauthenticateWithPhoneNumber$1, reauthenticateWithPopup as reauthenticateWithPopup$1, reauthenticateWithRedirect as reauthenticateWithRedirect$1, reload as reload$1, sendEmailVerification as sendEmailVerification$1, sendPasswordResetEmail as sendPasswordResetEmail$1, sendSignInLinkToEmail as sendSignInLinkToEmail$1, setPersistence as setPersistence$1, signInAnonymously as signInAnonymously$1, signInWithCredential as signInWithCredential$1, signInWithCustomToken as signInWithCustomToken$1, signInWithEmailAndPassword as signInWithEmailAndPassword$1, signInWithEmailLink as signInWithEmailLink$1, signInWithPhoneNumber as signInWithPhoneNumber$1, signInWithPopup as signInWithPopup$1, signInWithRedirect as signInWithRedirect$1, signOut as signOut$1, unlink as unlink$1, updateCurrentUser as updateCurrentUser$1, updateEmail as updateEmail$1, updatePassword as updatePassword$1, updatePhoneNumber as updatePhoneNumber$1, updateProfile as updateProfile$1, useDeviceLanguage as useDeviceLanguage$1, validatePassword as validatePassword$1, verifyBeforeUpdateEmail as verifyBeforeUpdateEmail$1, verifyPasswordResetCode as verifyPasswordResetCode$1 } from 'firebase/auth';\nexport * from 'firebase/auth';\n\nconst AUTH_PROVIDER_NAME = 'auth';\nclass Auth {\n    constructor(auth) {\n        return auth;\n    }\n}\nclass AuthInstances {\n    constructor() {\n        return ɵgetAllInstancesOf(AUTH_PROVIDER_NAME);\n    }\n}\nconst authInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(AUTH_PROVIDER_NAME))), distinct());\n\nconst PROVIDED_AUTH_INSTANCES = new InjectionToken('angularfire2.auth-instances');\nfunction defaultAuthInstanceFactory(provided, defaultApp) {\n    const defaultAuth = ɵgetDefaultInstanceOf(AUTH_PROVIDER_NAME, provided, defaultApp);\n    return defaultAuth && new Auth(defaultAuth);\n}\nfunction authInstanceFactory(fn) {\n    return (zone, injector) => {\n        const auth = zone.runOutsideAngular(() => fn(injector));\n        return new Auth(auth);\n    };\n}\nconst AUTH_INSTANCES_PROVIDER = {\n    provide: AuthInstances,\n    deps: [\n        [new Optional(), PROVIDED_AUTH_INSTANCES],\n    ]\n};\nconst DEFAULT_AUTH_INSTANCE_PROVIDER = {\n    provide: Auth,\n    useFactory: defaultAuthInstanceFactory,\n    deps: [\n        [new Optional(), PROVIDED_AUTH_INSTANCES],\n        FirebaseApp,\n    ]\n};\nclass AuthModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'auth');\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: AuthModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.10\", ngImport: i0, type: AuthModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: AuthModule, providers: [\n            DEFAULT_AUTH_INSTANCE_PROVIDER,\n            AUTH_INSTANCES_PROVIDER,\n        ] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: AuthModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        DEFAULT_AUTH_INSTANCE_PROVIDER,\n                        AUTH_INSTANCES_PROVIDER,\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\nfunction provideAuth(fn, ...deps) {\n    return {\n        ngModule: AuthModule,\n        providers: [{\n                provide: PROVIDED_AUTH_INSTANCES,\n                useFactory: authInstanceFactory(fn),\n                multi: true,\n                deps: [\n                    NgZone,\n                    Injector,\n                    ɵAngularFireSchedulers,\n                    FirebaseApps,\n                    [new Optional(), ɵAppCheckInstances],\n                    ...deps,\n                ]\n            }]\n    };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst authState = ɵzoneWrap(authState$1, true);\nconst user = ɵzoneWrap(user$1, true);\nconst idToken = ɵzoneWrap(idToken$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst applyActionCode = ɵzoneWrap(applyActionCode$1, true);\nconst beforeAuthStateChanged = ɵzoneWrap(beforeAuthStateChanged$1, true);\nconst checkActionCode = ɵzoneWrap(checkActionCode$1, true);\nconst confirmPasswordReset = ɵzoneWrap(confirmPasswordReset$1, true);\nconst connectAuthEmulator = ɵzoneWrap(connectAuthEmulator$1, true);\nconst createUserWithEmailAndPassword = ɵzoneWrap(createUserWithEmailAndPassword$1, true);\nconst deleteUser = ɵzoneWrap(deleteUser$1, true);\nconst fetchSignInMethodsForEmail = ɵzoneWrap(fetchSignInMethodsForEmail$1, true);\nconst getAdditionalUserInfo = ɵzoneWrap(getAdditionalUserInfo$1, true);\nconst getAuth = ɵzoneWrap(getAuth$1, true);\nconst getIdToken = ɵzoneWrap(getIdToken$1, true);\nconst getIdTokenResult = ɵzoneWrap(getIdTokenResult$1, true);\nconst getMultiFactorResolver = ɵzoneWrap(getMultiFactorResolver$1, true);\nconst getRedirectResult = ɵzoneWrap(getRedirectResult$1, true);\nconst initializeAuth = ɵzoneWrap(initializeAuth$1, true);\nconst initializeRecaptchaConfig = ɵzoneWrap(initializeRecaptchaConfig$1, true);\nconst isSignInWithEmailLink = ɵzoneWrap(isSignInWithEmailLink$1, true);\nconst linkWithCredential = ɵzoneWrap(linkWithCredential$1, true);\nconst linkWithPhoneNumber = ɵzoneWrap(linkWithPhoneNumber$1, true);\nconst linkWithPopup = ɵzoneWrap(linkWithPopup$1, true);\nconst linkWithRedirect = ɵzoneWrap(linkWithRedirect$1, true);\nconst multiFactor = ɵzoneWrap(multiFactor$1, true);\nconst onAuthStateChanged = ɵzoneWrap(onAuthStateChanged$1, true);\nconst onIdTokenChanged = ɵzoneWrap(onIdTokenChanged$1, true);\nconst parseActionCodeURL = ɵzoneWrap(parseActionCodeURL$1, true);\nconst reauthenticateWithCredential = ɵzoneWrap(reauthenticateWithCredential$1, true);\nconst reauthenticateWithPhoneNumber = ɵzoneWrap(reauthenticateWithPhoneNumber$1, true);\nconst reauthenticateWithPopup = ɵzoneWrap(reauthenticateWithPopup$1, true);\nconst reauthenticateWithRedirect = ɵzoneWrap(reauthenticateWithRedirect$1, true);\nconst reload = ɵzoneWrap(reload$1, true);\nconst sendEmailVerification = ɵzoneWrap(sendEmailVerification$1, true);\nconst sendPasswordResetEmail = ɵzoneWrap(sendPasswordResetEmail$1, true);\nconst sendSignInLinkToEmail = ɵzoneWrap(sendSignInLinkToEmail$1, true);\nconst setPersistence = ɵzoneWrap(setPersistence$1, true);\nconst signInAnonymously = ɵzoneWrap(signInAnonymously$1, true);\nconst signInWithCredential = ɵzoneWrap(signInWithCredential$1, true);\nconst signInWithCustomToken = ɵzoneWrap(signInWithCustomToken$1, true);\nconst signInWithEmailAndPassword = ɵzoneWrap(signInWithEmailAndPassword$1, true);\nconst signInWithEmailLink = ɵzoneWrap(signInWithEmailLink$1, true);\nconst signInWithPhoneNumber = ɵzoneWrap(signInWithPhoneNumber$1, true);\nconst signInWithPopup = ɵzoneWrap(signInWithPopup$1, true);\nconst signInWithRedirect = ɵzoneWrap(signInWithRedirect$1, true);\nconst signOut = ɵzoneWrap(signOut$1, true);\nconst unlink = ɵzoneWrap(unlink$1, true);\nconst updateCurrentUser = ɵzoneWrap(updateCurrentUser$1, true);\nconst updateEmail = ɵzoneWrap(updateEmail$1, true);\nconst updatePassword = ɵzoneWrap(updatePassword$1, true);\nconst updatePhoneNumber = ɵzoneWrap(updatePhoneNumber$1, true);\nconst updateProfile = ɵzoneWrap(updateProfile$1, true);\nconst useDeviceLanguage = ɵzoneWrap(useDeviceLanguage$1, true);\nconst validatePassword = ɵzoneWrap(validatePassword$1, true);\nconst verifyBeforeUpdateEmail = ɵzoneWrap(verifyBeforeUpdateEmail$1, true);\nconst verifyPasswordResetCode = ɵzoneWrap(verifyPasswordResetCode$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Auth, AuthInstances, AuthModule, applyActionCode, authInstance$, authState, beforeAuthStateChanged, checkActionCode, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, deleteUser, fetchSignInMethodsForEmail, getAdditionalUserInfo, getAuth, getIdToken, getIdTokenResult, getMultiFactorResolver, getRedirectResult, idToken, initializeAuth, initializeRecaptchaConfig, isSignInWithEmailLink, linkWithCredential, linkWithPhoneNumber, linkWithPopup, linkWithRedirect, multiFactor, onAuthStateChanged, onIdTokenChanged, parseActionCodeURL, provideAuth, reauthenticateWithCredential, reauthenticateWithPhoneNumber, reauthenticateWithPopup, reauthenticateWithRedirect, reload, sendEmailVerification, sendPasswordResetEmail, sendSignInLinkToEmail, setPersistence, signInAnonymously, signInWithCredential, signInWithCustomToken, signInWithEmailAndPassword, signInWithEmailLink, signInWithPhoneNumber, signInWithPopup, signInWithRedirect, signOut, unlink, updateCurrentUser, updateEmail, updatePassword, updatePhoneNumber, updateProfile, useDeviceLanguage, user, validatePassword, verifyBeforeUpdateEmail, verifyPasswordResetCode };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}